# CI for Nginx Docker image with Trivy vulnerability scanning and deployment to Kubernetes
# This GitHub Actions workflow builds a Docker image for Nginx, scans it for vulnerabilities using Trivy,
# and deploys it to a Kubernetes cluster. It runs on pushes to the main branch.
# The workflow consists of two jobs: build and deploy.
# The build job builds the Docker image, scans it for vulnerabilities, and pushes it to Docker Hub.
# The deploy job deploys the image to a Kubernetes cluster using kubectl.
# The workflow uses Docker Buildx for building the image and Trivy for vulnerability scanning.
# The workflow also uses GitHub secrets for sensitive information like Docker Hub credentials and Kubeconfig.
# The workflow is triggered on pushes to the main branch.
# The workflow uses the latest version of Ubuntu as the runner environment.
# The workflow uses the latest version of Docker Buildx and Trivy actions.
# The workflow uses the latest version of kubectl action for deploying to Kubernetes.

name: Build and Deploy Nginx
on:
  pull_request:
      branches: 
        - main


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .


    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@v0.11.2
      with:
        image-ref: ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

    - name: Push image to Docker Hub
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}:${{ github.run_id }}
      
        cache-from: type=registry,ref=${{ secrets.IMAGE_NAME }}:cache
        cache-to: type=registry,ref=${{ secrets.IMAGE_NAME }}:cache,mode=max

      run: |
        docker push ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: eks/setup-kubectl@v3
      with:
        version: 'v1.32.0'

    - name: Set KUBECONFIG
      run: |
        echo "${{ secrets.KUBECONFIG }}" > kubeconfig
        export KUBECONFIG=kubeconfig
    - name: Deploy to Kubernetes  
      run: |
        kubectl apply -f k8s/nginx-statefulset.yaml

    - name: Wait for Nginx to be ready 
      run: |
        kubectl rollout status statefulset/nginx-statefulset
        kubectl get pods -l app=nginx -o wide
        kubectl get svc -l app=nginx -o wide 
        kubectl get statefulset -l app=nginx -o wide
        kubectl get events --sort-by='.metadata.creationTimestamp'
        kubectl get pods -l app=nginx -o jsonpath='{.items[*].status.containerStatuses[0].ready}'


       